from python import Python
from tensor import Tensor, TensorSpec, TensorShape
from utils.index import Index
from random import rand
    
# Define the grid size
alias height: Int = 5
alias width: Int = 5
# Define the data type for the grid
alias type = DType.int32

# Define the total number of grains to add to the grid
alias totalGrains: Int16 = 10

# Create the grid as a 2D tensor
# each cell will contain the value indicating the height of the cell


fn main() raises:
    # program start
    print("Hello, Sandpile!")

    var grid = Tensor[type](height, width)
    #print(grid)

    for i in range(totalGrains):
        # mark the center
        let vCenter = height / 2
        let hCenter = width / 2

        # add a grain of sand to the center of the grid
        grid[Index(vCenter, hCenter)] += 1

        # find the heights of all the surrounding cells
        var localGrid = Tensor[type](3, 3)
        localGrid[Index(0, 0)] = grid[Index(vCenter - 1, hCenter - 1)]
        localGrid[Index(0, 1)] = grid[Index(vCenter - 1, hCenter)]
        localGrid[Index(0, 2)] = grid[Index(vCenter - 1, hCenter + 1)]
        localGrid[Index(1, 0)] = grid[Index(vCenter, hCenter - 1)]
        localGrid[Index(1, 1)] = grid[Index(vCenter, hCenter)]
        localGrid[Index(1, 2)] = grid[Index(vCenter, hCenter + 1)]
        localGrid[Index(2, 0)] = grid[Index(vCenter + 1, hCenter - 1)]
        localGrid[Index(2, 1)] = grid[Index(vCenter + 1, hCenter)]
        localGrid[Index(2, 2)] = grid[Index(vCenter + 1, hCenter + 1)]

        # see if the center cell is >=2 higher then the surrounding cells
        var lowestNeihbor = grid[Index(vCenter, hCenter)]
        for j in range(3):
            for k in range(3):
                if localGrid[Index(j, k)] < lowestNeihbor:
                    lowestNeihbor = localGrid[Index(i, j)]
        
        #print("lowest neighbor : ", lowestNeihbor)

        # check each cell in the 'wave' heading out in all directions from the center
        # First check the center cell
        #let localGrid = Tensor[type](4, 2)
        #checkCell(grid[Index(vCenter, hCenter)], vCenter, hCenter) 

        # if grid[Index(vCenter, hCenter)] >= 4:
        #     # find the 

        #     # check the localGrid
        #     checkCell(grid[Index(vCenter - 1, hCenter)], vCenter - 1, hCenter)
        #     checkCell(grid[Index(vCenter + 1, hCenter)], vCenter + 1, hCenter)
        #     checkCell(grid[Index(vCenter, hCenter - 1)], vCenter, hCenter - 1)
        #     checkCell(grid[Index(vCenter, hCenter + 1)], vCenter, hCenter + 1)



        #print(grid[Index(2,2)])

#fn checkCell(value: Int32, y: Float64, x: Float64):
    # print(value)
    # print(x)
    # print(y)

    

fn addGrain():
    print("Adding a grain to the grid")
    #grid[2,2] += 1

